---
export interface Props {
  title: string;
  subtitle?: string;
  description?: string;
  images: string[];
  ctaPrimary?: {
    text: string;
    href: string;
  };
  ctaSecondary?: {
    text: string;
    href: string;
  };
}

const {
  title,
  subtitle,
  description,
  images,
  ctaPrimary = { text: "Get Free Quote", href: "/contact" },
  ctaSecondary = { text: "Call 612-655-0648", href: "tel:6126550648" }
} = Astro.props;
---

<section class="bg-gray-50 py-12 md:py-16 lg:py-20">
  <div class="container mx-auto px-4">
    <!-- Mobile-first: Single column, then grid on larger screens -->
    <div class="lg:grid lg:grid-cols-2 lg:gap-12 lg:items-center">

      <!-- Content - Mobile First -->
      <div class="mb-8 lg:mb-0">
        <h1 class="text-3xl font-bold text-gray-900 mb-4 md:text-4xl lg:text-5xl">
          {title}
        </h1>

        {subtitle && (
          <h2 class="text-lg font-semibold text-gray-700 mb-4 md:text-xl">
            {subtitle}
          </h2>
        )}

        {description && (
          <p class="text-gray-600 mb-6 md:text-lg">
            {description}
          </p>
        )}

        <!-- Buttons stack on mobile, side-by-side on larger -->
        <div class="space-y-4 sm:space-y-0 sm:space-x-4 sm:flex">
          <a
            href={ctaPrimary.href}
            class="w-full sm:w-auto inline-flex items-center justify-center px-6 py-3 text-base font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors"
          >
            {ctaPrimary.text}
            <svg class="w-5 h-5 ml-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
            </svg>
          </a>

          <a
            href={ctaSecondary.href}
            class="w-full sm:w-auto inline-flex items-center justify-center px-6 py-3 text-base font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
          >
            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"></path>
            </svg>
            {ctaSecondary.text}
          </a>
        </div>
      </div>

      <!-- Image - Shows on all screens, better aspect ratio -->
      <div class="relative h-64 md:h-96 lg:h-full rounded-lg overflow-hidden shadow-xl">
        {images.map((image, index) => (
          <div
            class={`absolute inset-0 transition-opacity duration-1000 ${index === 0 ? 'opacity-100' : 'opacity-0'}`}
            data-slide={index}
          >
            <img
              src={image}
              alt={`${title} - Image ${index + 1}`}
              class="w-full h-full object-cover"
              loading={index === 0 ? 'eager' : 'lazy'}
            />
          </div>
        ))}

        {images.length > 1 && (
          <>
            <!-- Simple navigation for multiple images -->
            <button
              id="prevBtn"
              class="absolute left-2 top-1/2 -translate-y-1/2 bg-white/90 p-2 rounded-full shadow hover:bg-white transition"
              aria-label="Previous"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>

            <button
              id="nextBtn"
              class="absolute right-2 top-1/2 -translate-y-1/2 bg-white/90 p-2 rounded-full shadow hover:bg-white transition"
              aria-label="Next"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>

            <!-- Simple dots -->
            <div class="absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-2">
              {images.map((_, index) => (
                <button
                  class={`w-2 h-2 rounded-full transition ${index === 0 ? 'bg-white' : 'bg-white/60'}`}
                  data-dot={index}
                  aria-label={`Image ${index + 1}`}
                ></button>
              ))}
            </div>
          </>
        )}
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const slides = document.querySelectorAll('[data-slide]');
    const dots = document.querySelectorAll('[data-dot]');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');

    if (!slides || slides.length <= 1) return;

    let currentSlide = 0;
    let autoplayInterval;

    function showSlide(index) {
      slides.forEach((slide, i) => {
        slide.classList.toggle('opacity-100', i === index);
        slide.classList.toggle('opacity-0', i !== index);
      });

      dots.forEach((dot, i) => {
        dot.classList.toggle('bg-white', i === index);
        dot.classList.toggle('bg-white/60', i !== index);
      });

      currentSlide = index;
    }

    function nextSlide() {
      showSlide((currentSlide + 1) % slides.length);
    }

    function prevSlide() {
      showSlide((currentSlide - 1 + slides.length) % slides.length);
    }

    function startAutoplay() {
      autoplayInterval = setInterval(nextSlide, 5000);
    }

    function stopAutoplay() {
      clearInterval(autoplayInterval);
    }

    // Button navigation
    prevBtn?.addEventListener('click', () => {
      stopAutoplay();
      prevSlide();
      startAutoplay();
    });

    nextBtn?.addEventListener('click', () => {
      stopAutoplay();
      nextSlide();
      startAutoplay();
    });

    // Dot navigation
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        stopAutoplay();
        showSlide(index);
        startAutoplay();
      });
    });

    // Touch support
    const gallery = document.querySelector('.relative');
    if (gallery) {
      let touchStartX = 0;

      gallery.addEventListener('touchstart', (e) => {
        touchStartX = e.touches[0].clientX;
      });

      gallery.addEventListener('touchend', (e) => {
        const touchEndX = e.changedTouches[0].clientX;
        const diff = touchStartX - touchEndX;

        if (Math.abs(diff) > 50) {
          stopAutoplay();
          if (diff > 0) {
            nextSlide();
          } else {
            prevSlide();
          }
          startAutoplay();
        }
      });
    }

    // Start
    startAutoplay();
  });
</script>
