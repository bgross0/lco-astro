---
export interface Props {
  title: string;
  subtitle?: string;
  description?: string;
  images: string[];
  ctaPrimary?: {
    text: string;
    href: string;
  };
  ctaSecondary?: {
    text: string;
    href: string;
  };
}

const {
  title,
  subtitle,
  description,
  images,
  ctaPrimary = { text: "Get Free Quote", href: "/contact" },
  ctaSecondary = { text: "Call 612-655-0648", href: "tel:6126550648" }
} = Astro.props;
---

<section class="service-hero-v2">
  <!-- Gallery Background -->
  <div class="gallery-background">
    <div class="gallery-main">
      {images.map((image, index) => {
        const imageName = image.split('/').pop().replace(/\.(jpg|jpeg|png)$/i, '');
        const imageDir = image.substring(0, image.lastIndexOf('/'));

        return (
          <div class={`gallery-slide ${index === 0 ? 'active' : ''}`} data-slide={index}>
            <picture>
              <source
                type="image/webp"
                srcset={`
                  ${imageDir}/${imageName}-400w.webp 400w,
                  ${imageDir}/${imageName}-800w.webp 800w,
                  ${imageDir}/${imageName}-1200w.webp 1200w,
                  ${imageDir}/${imageName}-1600w.webp 1600w,
                  ${imageDir}/${imageName}.webp 2400w
                `}
                sizes="100vw"
              />
              <source
                type="image/jpeg"
                srcset={`
                  ${imageDir}/${imageName}-400w.jpg 400w,
                  ${imageDir}/${imageName}-800w.jpg 800w,
                  ${imageDir}/${imageName}-1200w.jpg 1200w,
                  ${imageDir}/${imageName}-1600w.jpg 1600w,
                  ${image} 2400w
                `}
                sizes="100vw"
              />
              <img
                src={image}
                alt={`${title} - Image ${index + 1}`}
                loading={index === 0 ? 'eager' : 'lazy'}
                fetchpriority={index === 0 ? 'high' : 'auto'}
                decoding={index === 0 ? 'sync' : 'async'}
              />
            </picture>
          </div>
        );
      })}
    </div>
    <div class="gallery-overlay"></div>
  </div>

  <!-- Content Card -->
  <div class="hero-content">
    <div class="content-inner">
        <!-- Title -->
        <h1 class="hero-title">
          {title}
          <div class="title-underline"></div>
        </h1>

        <!-- Subtitle -->
        {subtitle && (
          <h2 class="hero-subtitle">{subtitle}</h2>
        )}

        <!-- Description -->
        {description && (
          <p class="hero-description">{description}</p>
        )}

        <!-- CTAs -->
        <div class="hero-actions">
          <a href={ctaPrimary.href} class="btn btn-primary">
            {ctaPrimary.text}
            <svg xmlns="http://www.w3.org/2000/svg" class="btn-arrow" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
            </svg>
          </a>
          <a href={ctaSecondary.href} class="btn btn-secondary">
            <svg xmlns="http://www.w3.org/2000/svg" class="btn-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
            </svg>
            {ctaSecondary.text}
          </a>
        </div>
    </div>
  </div>

  <!-- Gallery Controls -->
  <button class="gallery-prev" aria-label="Previous image">
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
    </svg>
  </button>
  <button class="gallery-next" aria-label="Next image">
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
    </svg>
  </button>

  <!-- Dots Navigation -->
  <div class="gallery-dots">
    {images.map((_, index) => (
      <button
        class={`dot ${index === 0 ? 'active' : ''}`}
        data-slide={index}
        aria-label={`Go to slide ${index + 1}`}
      ></button>
    ))}
  </div>
  </div>
</section>

<style>
  .service-hero-v2 {
    position: relative;
    height: 85vh;
    overflow: visible;
    background: transparent;
  }

  /* Gallery Background */
  .gallery-background {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
  }

  .gallery-main {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .gallery-slide {
    position: absolute;
    inset: 0;
    opacity: 0;
    transition: opacity 1.5s ease-in-out;
  }

  .gallery-slide.active {
    opacity: 1;
  }

  .gallery-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    animation: kenBurns 20s ease-out infinite alternate;
  }

  .gallery-slide picture {
    display: contents;
    width: 100%;
    height: 100%;
  }

  @keyframes kenBurns {
    0% { transform: scale(1); }
    100% { transform: scale(1.1); }
  }

  .gallery-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(90deg,
      rgba(0, 0, 0, 0.7) 0%,
      rgba(0, 0, 0, 0.3) 50%,
      transparent 100%);
    z-index: 2;
  }

  /* Content Card */
  .hero-content {
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 100%;
    padding: 2rem;
    z-index: 10;
  }

  @media (min-width: 1024px) {
    .hero-content {
      width: 45%;
      max-width: 600px;
      padding: 0;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
    }

    .gallery-overlay {
      background: linear-gradient(90deg,
        rgba(0, 0, 0, 0.6) 0%,
        rgba(0, 0, 0, 0.2) 40%,
        transparent 60%);
    }
  }

  .content-inner {
    background: linear-gradient(135deg, #2E5A87 0%, #4A90E2 100%);
    border-radius: 1rem;
    padding: 2.5rem;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    animation: slideInUp 0.8s ease-out;
  }

  @media (min-width: 1024px) {
    .content-inner {
      border-radius: 0 2rem 2rem 0;
      padding: 4rem 3rem 4rem 4rem;
      min-height: 500px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      animation: slideInLeft 0.8s ease-out;
    }
  }


  .hero-title {
    font-size: clamp(2.25rem, 4vw, 3.5rem);
    font-weight: 800;
    color: #ffffff;
    margin-bottom: 1.5rem;
    line-height: 1.1;
    position: relative;
  }

  .title-underline {
    position: absolute;
    bottom: -0.5rem;
    left: 0;
    width: 4rem;
    height: 4px;
    background: linear-gradient(90deg, #60a5fa 0%, transparent 100%);
    border-radius: 2px;
    animation: expandWidth 1s ease-out 0.3s both;
  }

  .hero-subtitle {
    font-size: 1.5rem;
    font-weight: 600;
    color: rgba(255, 255, 255, 0.95);
    margin-bottom: 1.25rem;
  }

  .hero-description {
    font-size: 1.125rem;
    color: rgba(255, 255, 255, 0.9);
    line-height: 1.7;
    margin-bottom: 2rem;
  }

  .hero-actions {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-top: 1.5rem;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.875rem 1.75rem;
    border-radius: 0.5rem;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .btn-primary {
    background: #ffffff;
    color: #4A90E2;
  }

  .btn-primary:hover {
    background: #f8f9fa;
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
  }

  .btn-secondary {
    background: rgba(255, 255, 255, 0.15);
    color: #ffffff;
    border: 2px solid rgba(255, 255, 255, 0.4);
  }

  .btn-secondary:hover {
    background: rgba(255, 255, 255, 0.25);
    border-color: rgba(255, 255, 255, 0.6);
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  }

  .btn-icon, .btn-arrow {
    width: 1.25rem;
    height: 1.25rem;
  }

  .btn-arrow {
    transition: transform 0.3s ease;
  }

  .btn:hover .btn-arrow {
    transform: translateX(4px);
  }

  /* Gallery Controls */

  .gallery-prev,
  .gallery-next {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.9);
    border: none;
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 15;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .gallery-prev {
    left: auto;
    right: 4.5rem;
  }

  .gallery-next {
    right: 1rem;
  }

  @media (min-width: 1024px) {
    .gallery-prev {
      left: auto;
      right: 6rem;
    }

    .gallery-next {
      right: 2rem;
    }
  }

  .gallery-prev:hover,
  .gallery-next:hover {
    background: #ffffff;
    transform: translateY(-50%) scale(1.1);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
  }

  .gallery-prev svg,
  .gallery-next svg {
    width: 1.5rem;
    height: 1.5rem;
    stroke: #4A90E2;
  }

  .gallery-dots {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 0.5rem;
    z-index: 15;
  }

  @media (min-width: 1024px) {
    .gallery-dots {
      left: auto;
      right: 2rem;
      transform: none;
    }
  }

  .dot {
    width: 0.75rem;
    height: 0.75rem;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.5);
    border: 2px solid rgba(255, 255, 255, 0.8);
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .dot.active {
    background: #ffffff;
    width: 2rem;
    border-radius: 0.375rem;
  }

  .dot:hover:not(.active) {
    background: rgba(255, 255, 255, 0.7);
  }

  /* Removed thumbnails for cleaner design */

  /* Animations */
  @keyframes slideInLeft {
    from {
      transform: translateX(-100px);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slideInUp {
    from {
      transform: translateY(30px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes expandWidth {
    from {
      width: 0;
    }
    to {
      width: 4rem;
    }
  }

  /* Mobile Responsive */
  @media (max-width: 1023px) {
    .service-hero-v2 {
      height: 70vh;
    }

    .gallery-overlay {
      background: linear-gradient(180deg,
        transparent 0%,
        rgba(0, 0, 0, 0.5) 50%,
        rgba(0, 0, 0, 0.8) 100%);
    }

    .hero-content {
      top: auto;
      bottom: 0;
      transform: none;
      padding: 1rem;
    }

    .content-inner {
      border-radius: 1.5rem 1.5rem 0 0;
    }

    .hero-actions {
      flex-direction: column;
      align-items: stretch;
    }
  }

  @media (max-width: 640px) {
    .gallery-prev,
    .gallery-next {
      width: 2.5rem;
      height: 2.5rem;
    }

    .gallery-prev {
      right: 3.5rem;
    }

    .content-inner {
      padding: 2rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const galleries = document.querySelectorAll('.service-hero-v2');

    galleries.forEach(gallery => {
      const slides = gallery.querySelectorAll('.gallery-slide');
      const dots = gallery.querySelectorAll('.dot');
      const prevBtn = gallery.querySelector('.gallery-prev');
      const nextBtn = gallery.querySelector('.gallery-next');

      let currentSlide = 0;
      let autoplayInterval;

      function showSlide(index) {
        // Remove active class from all
        slides.forEach(slide => slide.classList.remove('active'));
        dots.forEach(dot => dot.classList.remove('active'));

        // Add active class to current
        slides[index].classList.add('active');
        if (dots[index]) dots[index].classList.add('active');

        currentSlide = index;
      }

      function nextSlide() {
        const nextIndex = (currentSlide + 1) % slides.length;
        showSlide(nextIndex);
      }

      function prevSlide() {
        const prevIndex = (currentSlide - 1 + slides.length) % slides.length;
        showSlide(prevIndex);
      }

      function startAutoplay() {
        autoplayInterval = setInterval(nextSlide, 5000);
      }

      function stopAutoplay() {
        clearInterval(autoplayInterval);
      }

      // Event listeners
      if (prevBtn) prevBtn.addEventListener('click', () => {
        stopAutoplay();
        prevSlide();
        startAutoplay();
      });

      if (nextBtn) nextBtn.addEventListener('click', () => {
        stopAutoplay();
        nextSlide();
        startAutoplay();
      });

      dots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
          stopAutoplay();
          showSlide(index);
          startAutoplay();
        });
      });

      // Pause on hover
      const galleryBackground = gallery.querySelector('.gallery-background');
      if (galleryBackground) {
        galleryBackground.addEventListener('mouseenter', stopAutoplay);
        galleryBackground.addEventListener('mouseleave', startAutoplay);
      }

      // Touch/swipe support
      let touchStartX = 0;
      let touchEndX = 0;

      if (galleryBackground) {
        galleryBackground.addEventListener('touchstart', (e) => {
          touchStartX = e.changedTouches[0].screenX;
        });

        galleryBackground.addEventListener('touchend', (e) => {
          touchEndX = e.changedTouches[0].screenX;
          handleSwipe();
        });
      }

      function handleSwipe() {
        const swipeThreshold = 50;
        const diff = touchStartX - touchEndX;

        if (Math.abs(diff) > swipeThreshold) {
          stopAutoplay();
          if (diff > 0) {
            nextSlide();
          } else {
            prevSlide();
          }
          startAutoplay();
        }
      }

      // Start autoplay
      startAutoplay();
    });
  });
</script>