---
export interface Props {
  title: string;
  subtitle?: string;
  description?: string;
  images: string[];
  ctaPrimary?: {
    text: string;
    href: string;
  };
  ctaSecondary?: {
    text: string;
    href: string;
  };
}

const {
  title,
  subtitle,
  description,
  images,
  ctaPrimary = { text: "Get Free Quote", href: "/contact" },
  ctaSecondary = { text: "Call 612-655-0648", href: "tel:6126550648" }
} = Astro.props;
---

<section class="bg-white dark:bg-gray-900">
  <div class="grid max-w-screen-xl px-4 py-8 mx-auto lg:gap-8 xl:gap-0 lg:py-16 lg:grid-cols-12">
    <!-- Content Column -->
    <div class="mr-auto place-self-center lg:col-span-7">
      <h1 class="max-w-2xl mb-4 text-4xl font-extrabold tracking-tight leading-none md:text-5xl xl:text-6xl dark:text-white">
        {title}
      </h1>

      {subtitle && (
        <h2 class="max-w-2xl mb-4 text-xl font-semibold text-gray-700 md:text-2xl dark:text-gray-300">
          {subtitle}
        </h2>
      )}

      {description && (
        <p class="max-w-2xl mb-6 font-light text-gray-500 lg:mb-8 md:text-lg lg:text-xl dark:text-gray-400">
          {description}
        </p>
      )}

      <div class="flex flex-col sm:flex-row gap-4">
        <a
          href={ctaPrimary.href}
          class="inline-flex items-center justify-center px-5 py-3 text-base font-medium text-center text-white rounded-lg bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 dark:focus:ring-blue-900 transition-all duration-300"
        >
          {ctaPrimary.text}
          <svg class="w-5 h-5 ml-2 -mr-1" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd"></path>
          </svg>
        </a>

        <a
          href={ctaSecondary.href}
          class="inline-flex items-center justify-center px-5 py-3 text-base font-medium text-center text-gray-900 border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 dark:text-white dark:border-gray-700 dark:hover:bg-gray-700 dark:focus:ring-gray-800 transition-all duration-300"
        >
          <svg class="w-5 h-5 mr-2 -ml-1" fill="currentColor" viewBox="0 0 20 20">
            <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"></path>
          </svg>
          {ctaSecondary.text}
        </a>
      </div>
    </div>

    <!-- Image Gallery Column -->
    <div class="hidden lg:mt-0 lg:col-span-5 lg:flex">
      <div class="relative w-full h-full">
        {images.map((image, index) => (
          <div
            class={`absolute inset-0 transition-opacity duration-1000 ${index === 0 ? 'opacity-100' : 'opacity-0'}`}
            data-slide={index}
          >
            <img
              src={image}
              alt={`${title} - Image ${index + 1}`}
              class="w-full h-full object-cover rounded-lg shadow-xl"
              loading={index === 0 ? 'eager' : 'lazy'}
              fetchpriority={index === 0 ? 'high' : 'auto'}
            />
          </div>
        ))}

        {images.length > 1 && (
          <>
            <!-- Navigation Buttons -->
            <button
              id="prevBtn"
              class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white text-gray-800 p-2 rounded-full shadow-lg transition-all duration-300 hover:scale-110"
              aria-label="Previous image"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>

            <button
              id="nextBtn"
              class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white text-gray-800 p-2 rounded-full shadow-lg transition-all duration-300 hover:scale-110"
              aria-label="Next image"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>

            <!-- Dots Navigation -->
            <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
              {images.map((_, index) => (
                <button
                  class={`w-3 h-3 rounded-full transition-all duration-300 ${index === 0 ? 'bg-white' : 'bg-white/50 hover:bg-white/75'}`}
                  data-slide={index}
                  aria-label={`Go to slide ${index + 1}`}
                ></button>
              ))}
            </div>
          </>
        )}
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const slides = document.querySelectorAll('[data-slide]');
    const dots = document.querySelectorAll('[data-slide]');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');

    if (slides.length <= 1) return; // No need for navigation with single image

    let currentSlide = 0;
    let autoplayInterval;

    function showSlide(index) {
      // Hide all slides
      slides.forEach((slide, i) => {
        slide.classList.toggle('opacity-100', i === index);
        slide.classList.toggle('opacity-0', i !== index);
      });

      // Update dots
      dots.forEach((dot, i) => {
        if (dot.tagName === 'BUTTON' && dot.hasAttribute('data-slide')) {
          dot.classList.toggle('bg-white', i === index);
          dot.classList.toggle('bg-white/50', i !== index);
        }
      });

      currentSlide = index;
    }

    function nextSlide() {
      const nextIndex = (currentSlide + 1) % slides.length;
      showSlide(nextIndex);
    }

    function prevSlide() {
      const prevIndex = (currentSlide - 1 + slides.length) % slides.length;
      showSlide(prevIndex);
    }

    function startAutoplay() {
      if (slides.length > 1) {
        autoplayInterval = setInterval(nextSlide, 5000);
      }
    }

    function stopAutoplay() {
      clearInterval(autoplayInterval);
    }

    // Navigation buttons
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        stopAutoplay();
        prevSlide();
        setTimeout(startAutoplay, 2000);
      });
    }

    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        stopAutoplay();
        nextSlide();
        setTimeout(startAutoplay, 2000);
      });
    }

    // Dot navigation
    document.querySelectorAll('button[data-slide]').forEach((dot, index) => {
      dot.addEventListener('click', () => {
        stopAutoplay();
        showSlide(index);
        setTimeout(startAutoplay, 2000);
      });
    });

    // Touch/swipe support for mobile
    const gallery = document.querySelector('.relative');
    if (gallery) {
      let touchStartX = 0;
      let touchEndX = 0;

      gallery.addEventListener('touchstart', (e) => {
        touchStartX = e.changedTouches[0].screenX;
      }, { passive: true });

      gallery.addEventListener('touchend', (e) => {
        touchEndX = e.changedTouches[0].screenX;
        handleSwipe();
      }, { passive: true });

      function handleSwipe() {
        const swipeThreshold = 50;
        const diff = touchStartX - touchEndX;

        if (Math.abs(diff) > swipeThreshold) {
          stopAutoplay();
          if (diff > 0) {
            nextSlide();
          } else {
            prevSlide();
          }
          setTimeout(startAutoplay, 2000);
        }
      }

      // Pause autoplay on hover (desktop only)
      if (window.innerWidth >= 1024) {
        gallery.addEventListener('mouseenter', stopAutoplay);
        gallery.addEventListener('mouseleave', startAutoplay);
      }
    }

    // Start autoplay
    startAutoplay();
  });
</script>
