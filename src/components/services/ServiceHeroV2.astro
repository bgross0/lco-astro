---
export interface Props {
  title: string;
  subtitle?: string;
  description?: string;
  images: string[];
  ctaPrimary?: {
    text: string;
    href: string;
  };
  ctaSecondary?: {
    text: string;
    href: string;
  };
}

const {
  title,
  subtitle,
  description,
  images,
  ctaPrimary = { text: "Get Free Quote", href: "/contact" },
  ctaSecondary = { text: "Call 612-655-0648", href: "tel:6126550648" }
} = Astro.props;
---

<section class="service-hero">
  <div class="container">
    <div class="service-hero__grid">
      <!-- Content Column -->
      <div class="service-hero__content">
        <div class="service-hero__content-inner">
          <h1 class="service-hero__title">
            {title}
            <div class="service-hero__title-underline"></div>
          </h1>

          {subtitle && (
            <h2 class="service-hero__subtitle">{subtitle}</h2>
          )}

          {description && (
            <p class="service-hero__description">{description}</p>
          )}

          <div class="service-hero__actions">
            <a href={ctaPrimary.href} class="service-hero__btn service-hero__btn--primary">
              {ctaPrimary.text}
              <svg class="service-hero__btn-arrow" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
              </svg>
            </a>
            <a href={ctaSecondary.href} class="service-hero__btn service-hero__btn--secondary">
              <svg class="service-hero__btn-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
              </svg>
              {ctaSecondary.text}
            </a>
          </div>
        </div>
      </div>

      <!-- Image Gallery Column -->
      <div class="service-hero__gallery">
        <div class="service-hero__gallery-container">
          <div class="service-hero__gallery-main">
            {images.map((image, index) => (
              <div class={`service-hero__slide ${index === 0 ? 'active' : ''}`} data-slide={index}>
                <picture>
                  <img
                    src={image}
                    alt={`${title} - Image ${index + 1}`}
                    loading={index === 0 ? 'eager' : 'lazy'}
                    fetchpriority={index === 0 ? 'high' : 'auto'}
                    decoding={index === 0 ? 'sync' : 'async'}
                    class="service-hero__image"
                  />
                </picture>
              </div>
            ))}
          </div>

          {images.length > 1 && (
            <>
              <!-- Navigation Controls -->
              <button class="service-hero__nav service-hero__nav--prev" aria-label="Previous image">
                <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              <button class="service-hero__nav service-hero__nav--next" aria-label="Next image">
                <svg fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>

              <!-- Dots Navigation -->
              <div class="service-hero__dots">
                {images.map((_, index) => (
                  <button
                    class={`service-hero__dot ${index === 0 ? 'active' : ''}`}
                    data-slide={index}
                    aria-label={`Go to slide ${index + 1}`}
                  ></button>
                ))}
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .service-hero {
    padding: var(--space-16) 0;
    background: linear-gradient(to bottom, #ffffff 0%, #f8f9fa 100%);
    overflow: hidden;
    position: relative;
  }

  .service-hero__grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--space-8);
    align-items: center;
    min-height: 60vh;
  }

  /* Content Styles */
  .service-hero__content {
    order: 2;
  }

  .service-hero__content-inner {
    background: linear-gradient(135deg, #2E5A87 0%, #4A90E2 100%);
    border-radius: var(--radius-2xl);
    padding: var(--space-8);
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
    color: white;
  }

  .service-hero__title {
    font-size: clamp(1.75rem, 5vw, 3rem);
    font-weight: 800;
    line-height: 1.1;
    margin-bottom: var(--space-4);
    position: relative;
  }

  .service-hero__title-underline {
    width: 4rem;
    height: 4px;
    background: linear-gradient(90deg, #60a5fa 0%, transparent 100%);
    border-radius: 2px;
    margin-top: var(--space-2);
  }

  .service-hero__subtitle {
    font-size: clamp(1rem, 3vw, 1.5rem);
    font-weight: 600;
    color: rgba(255, 255, 255, 0.95);
    margin-bottom: var(--space-3);
  }

  .service-hero__description {
    font-size: clamp(0.875rem, 2.5vw, 1.125rem);
    color: rgba(255, 255, 255, 0.9);
    line-height: 1.6;
    margin-bottom: var(--space-6);
  }

  .service-hero__actions {
    display: flex;
    flex-direction: column;
    gap: var(--space-3);
  }

  .service-hero__btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-2);
    padding: var(--space-3) var(--space-6);
    border-radius: var(--radius-md);
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s ease;
    font-size: var(--text-sm);
  }

  .service-hero__btn--primary {
    background: white;
    color: var(--primary);
  }

  .service-hero__btn--primary:hover {
    background: #f8f9fa;
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .service-hero__btn--secondary {
    background: rgba(255, 255, 255, 0.15);
    color: white;
    border: 2px solid rgba(255, 255, 255, 0.3);
  }

  .service-hero__btn--secondary:hover {
    background: rgba(255, 255, 255, 0.25);
    border-color: rgba(255, 255, 255, 0.5);
    transform: translateY(-2px);
  }

  .service-hero__btn-icon,
  .service-hero__btn-arrow {
    width: 1rem;
    height: 1rem;
    transition: transform 0.3s ease;
  }

  .service-hero__btn:hover .service-hero__btn-arrow {
    transform: translateX(4px);
  }

  /* Gallery Styles */
  .service-hero__gallery {
    order: 1;
  }

  .service-hero__gallery-container {
    position: relative;
    aspect-ratio: 4/3;
    border-radius: var(--radius-2xl);
    overflow: hidden;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
  }

  .service-hero__gallery-main {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .service-hero__slide {
    position: absolute;
    inset: 0;
    opacity: 0;
    transition: opacity 0.8s ease-in-out;
  }

  .service-hero__slide.active {
    opacity: 1;
  }

  .service-hero__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  /* Navigation Controls */
  .service-hero__nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.9);
    border: none;
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 10;
    backdrop-filter: blur(10px);
  }

  .service-hero__nav--prev {
    left: 1rem;
  }

  .service-hero__nav--next {
    right: 1rem;
  }

  .service-hero__nav:hover {
    background: white;
    transform: translateY(-50%) scale(1.1);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  }

  .service-hero__nav svg {
    width: 1rem;
    height: 1rem;
    stroke: var(--primary);
  }

  /* Dots Navigation */
  .service-hero__dots {
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: var(--space-2);
    z-index: 10;
  }

  .service-hero__dot {
    width: 0.5rem;
    height: 0.5rem;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.6);
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .service-hero__dot.active {
    background: white;
    transform: scale(1.5);
  }

  .service-hero__dot:hover:not(.active) {
    background: rgba(255, 255, 255, 0.8);
  }

  /* Tablet Layout */
  @media (min-width: 768px) {
    .service-hero {
      padding: var(--space-20) 0;
    }

    .service-hero__grid {
      grid-template-columns: 1fr 1fr;
      gap: var(--space-12);
      min-height: 70vh;
    }

    .service-hero__content {
      order: 1;
    }

    .service-hero__gallery {
      order: 2;
    }

    .service-hero__content-inner {
      padding: var(--space-10);
    }

    .service-hero__actions {
      flex-direction: row;
      flex-wrap: wrap;
    }

    .service-hero__btn {
      flex: 1;
      min-width: 200px;
    }

    .service-hero__gallery-container {
      aspect-ratio: 3/2;
    }

    .service-hero__nav {
      width: 3rem;
      height: 3rem;
    }

    .service-hero__nav svg {
      width: 1.25rem;
      height: 1.25rem;
    }
  }

  /* Desktop Layout */
  @media (min-width: 1024px) {
    .service-hero {
      padding: var(--space-24) 0;
    }

    .service-hero__grid {
      grid-template-columns: 5fr 7fr;
      gap: var(--space-16);
      min-height: 80vh;
    }

    .service-hero__content-inner {
      padding: var(--space-12);
    }

    .service-hero__actions {
      flex-direction: column;
      align-items: flex-start;
    }

    .service-hero__btn {
      flex: none;
      min-width: 220px;
    }

    .service-hero__gallery-container {
      aspect-ratio: 16/10;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const heroes = document.querySelectorAll('.service-hero');

    heroes.forEach(hero => {
      const slides = hero.querySelectorAll('.service-hero__slide');
      const dots = hero.querySelectorAll('.service-hero__dot');
      const prevBtn = hero.querySelector('.service-hero__nav--prev');
      const nextBtn = hero.querySelector('.service-hero__nav--next');

      // Only initialize if there are multiple images
      if (slides.length <= 1) return;

      let currentSlide = 0;
      let autoplayInterval;

      function showSlide(index) {
        // Remove active class from all
        slides.forEach(slide => slide.classList.remove('active'));
        dots.forEach(dot => dot.classList.remove('active'));

        // Add active class to current
        if (slides[index]) slides[index].classList.add('active');
        if (dots[index]) dots[index].classList.add('active');

        currentSlide = index;
      }

      function nextSlide() {
        const nextIndex = (currentSlide + 1) % slides.length;
        showSlide(nextIndex);
      }

      function prevSlide() {
        const prevIndex = (currentSlide - 1 + slides.length) % slides.length;
        showSlide(prevIndex);
      }

      function startAutoplay() {
        if (slides.length > 1) {
          autoplayInterval = setInterval(nextSlide, 6000);
        }
      }

      function stopAutoplay() {
        clearInterval(autoplayInterval);
      }

      // Navigation buttons
      if (prevBtn) {
        prevBtn.addEventListener('click', () => {
          stopAutoplay();
          prevSlide();
          setTimeout(startAutoplay, 1000);
        });
      }

      if (nextBtn) {
        nextBtn.addEventListener('click', () => {
          stopAutoplay();
          nextSlide();
          setTimeout(startAutoplay, 1000);
        });
      }

      // Dot navigation
      dots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
          stopAutoplay();
          showSlide(index);
          setTimeout(startAutoplay, 1000);
        });
      });

      // Touch/swipe support
      const galleryContainer = hero.querySelector('.service-hero__gallery-container');
      if (galleryContainer) {
        let touchStartX = 0;
        let touchEndX = 0;

        galleryContainer.addEventListener('touchstart', (e) => {
          touchStartX = e.changedTouches[0].screenX;
        }, { passive: true });

        galleryContainer.addEventListener('touchend', (e) => {
          touchEndX = e.changedTouches[0].screenX;
          handleSwipe();
        }, { passive: true });

        function handleSwipe() {
          const swipeThreshold = 75;
          const diff = touchStartX - touchEndX;

          if (Math.abs(diff) > swipeThreshold) {
            stopAutoplay();
            if (diff > 0) {
              nextSlide();
            } else {
              prevSlide();
            }
            setTimeout(startAutoplay, 1000);
          }
        }

        // Pause autoplay on hover (desktop only)
        if (window.innerWidth >= 768) {
          galleryContainer.addEventListener('mouseenter', stopAutoplay);
          galleryContainer.addEventListener('mouseleave', startAutoplay);
        }
      }

      // Start autoplay
      startAutoplay();
    });
  });
</script>
