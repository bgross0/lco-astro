---
import settings from '../../data/settings.json';

export interface Props {
  formName?: string;
  className?: string;
  email?: string; // Email where form submissions will be sent
}

const { 
  formName = "contact", 
  className = "",
  email = settings.email
} = Astro.props;

---

<form action="https://formsubmit.co/cadenf@lakecountyoutdoor.com" method="POST" class={`contact-form ${className}`}/>

  <!-- FormSubmit Configuration -->
  <input type="hidden" name="_subject" value="New Contact Form Submission" />
  <input type="hidden" name="_captcha" value="false" /> <!-- Disable captcha -->
  <input type="hidden" name="_template" value="table" /> <!-- Email template style -->
  
  <!-- Redirect to thank you page after submission -->
  <input type="hidden" name="_next" value="https://lakecountyoutdoor.com/thank-you" />
  
  <!-- Honeypot spam protection -->
  <input type="text" name="_honey" style="display:none" />
  
  <!-- Error Messages (only shown for validation) -->
  <div id="form-message" class="form-message" aria-live="polite"></div>
  
  <!-- Name Field -->
  <div class="form-group">
    <label for="name">
      Name <span class="required">*</span>
    </label>
    <input
      type="text"
      id="name"
      name="name"
      required
      aria-required="true"
      aria-describedby="name-error"
      placeholder="Your full name"
    />
    <span id="name-error" class="error-message" role="alert"></span>
  </div>
  
  <!-- Email Field -->
  <div class="form-group">
    <label for="email">
      Email <span class="required">*</span>
    </label>
    <input
      type="email"
      id="email"
      name="email"
      required
      aria-required="true"
      aria-describedby="email-error"
      placeholder="your@email.com"
    />
    <span id="email-error" class="error-message" role="alert"></span>
  </div>
  
  <!-- Phone Field -->
  <div class="form-group">
    <label for="phone">
      Phone <span class="required">*</span>
    </label>
    <input
      type="tel"
      id="phone"
      name="phone"
      required
      aria-required="true"
      aria-describedby="phone-error"
      placeholder="(555) 123-4567"
    />
    <span id="phone-error" class="error-message" role="alert"></span>
  </div>
  
  <!-- Service Type Field -->
  <div class="form-group">
    <label for="service">
      Service Type <span class="required">*</span>
    </label>
    <select
      id="service"
      name="service"
      required
      aria-required="true"
      aria-describedby="service-error"
    >
      <option value="">Select a service</option>
      <option value="hunting">Hunting Guide Services</option>
      <option value="fishing">Fishing Guide Services</option>
      <option value="custom">Custom Outdoor Adventures</option>
      <option value="consultation">Outdoor Consultation</option>
      <option value="other">Other</option>
    </select>
    <span id="service-error" class="error-message" role="alert"></span>
  </div>
  
  <!-- Message Field -->
  <div class="form-group">
    <label for="message">
      Message <span class="required">*</span>
    </label>
    <textarea
      id="message"
      name="message"
      rows="5"
      required
      aria-required="true"
      aria-describedby="message-error"
      placeholder="Tell us about your outdoor adventure needs..."
    ></textarea>
    <span id="message-error" class="error-message" role="alert"></span>
  </div>
  
  <!-- Submit Button -->
  <button type="submit" class="btn btn-primary">
    Send Message
  </button>
</form>

<script>
  // Form validation and submission handling
  const form = document.querySelector('.contact-form');
  const formMessage = document.getElementById('form-message');
  
  // Validation patterns
  const patterns = {
    name: /^[a-zA-Z\s'-]{2,50}$/,
    email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
    phone: /^[\d\s()+-]{10,20}$/,
    message: /^.{10,1000}$/
  };
  
  // Error messages
  const errorMessages = {
    name: 'Please enter a valid name (2-50 characters)',
    email: 'Please enter a valid email address',
    phone: 'Please enter a valid phone number',
    service: 'Please select a service type',
    message: 'Please enter a message (10-1000 characters)'
  };
  
  // Validate individual field
  function validateField(field) {
    const fieldName = field.name;
    const value = field.value.trim();
    const errorElement = document.getElementById(`${fieldName}-error`);
    
    // Clear previous error
    errorElement.textContent = '';
    field.classList.remove('error');
    
    // Check if required and empty
    if (field.hasAttribute('required') && !value) {
      errorElement.textContent = `${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)} is required`;
      field.classList.add('error');
      return false;
    }
    
    // Pattern validation for specific fields
    if (value && patterns[fieldName]) {
      const pattern = patterns[fieldName];
      if (!pattern.test(value)) {
        errorElement.textContent = errorMessages[fieldName];
        field.classList.add('error');
        return false;
      }
    }
    
    return true;
  }
  
  // Validate entire form
  function validateForm() {
    const fields = form.querySelectorAll('input, textarea, select');
    let isValid = true;
    
    fields.forEach(field => {
      if (!validateField(field)) {
        isValid = false;
      }
    });
    
    return isValid;
  }
  
  // Add real-time validation
  form.addEventListener('blur', (e) => {
    const target = e.target;
    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.tagName === 'SELECT') {
      validateField(target);
    }
  }, true);
  
  // Handle form validation before submission
  form.addEventListener('submit', (e) => {
    // Validate form
    if (!validateForm()) {
      e.preventDefault();
      const formMessage = document.getElementById('form-message');
      if (formMessage) {
        formMessage.textContent = 'Please correct the errors below.';
        formMessage.className = 'form-message error';
        formMessage.style.display = 'block';
      }
      return false;
    }
    
    // Form is valid, let FormSubmit handle the submission
    const submitButton = form.querySelector('button[type="submit"]');
    if (submitButton) {
      submitButton.textContent = 'Sending...';
      submitButton.disabled = true;
    }
  });
  
  // Phone number formatting
  const phoneInput = document.getElementById('phone');
  phoneInput.addEventListener('input', (e) => {
    let value = (e.target).value.replace(/\D/g, '');
    if (value.length >= 6) {
      value = `(${value.slice(0, 3)}) ${value.slice(3, 6)}-${value.slice(6, 10)}`;
    } else if (value.length >= 3) {
      value = `(${value.slice(0, 3)}) ${value.slice(3)}`;
    }
    (e.target).value = value;
  });
</script>

<style>
  .contact-form {
    max-width: 600px;
    margin: 0 auto;
  }
  
  .form-group {
    margin-bottom: 1.5rem;
  }
  
  label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: var(--color-text-primary);
  }
  
  .required {
    color: var(--color-accent);
  }
  
  input,
  textarea,
  select {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 2px solid var(--color-border);
    border-radius: 4px;
    font-size: 1rem;
    font-family: var(--font-body);
    background-color: white;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }
  
  input:focus,
  textarea:focus,
  select:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(25, 87, 128, 0.1);
  }
  
  input.error,
  textarea.error,
  select.error {
    border-color: #dc3545;
  }
  
  textarea {
    resize: vertical;
    min-height: 120px;
  }
  
  .error-message {
    display: block;
    margin-top: 0.25rem;
    font-size: 0.875rem;
    color: #dc3545;
    min-height: 1.2em;
  }
  
  .form-message {
    padding: 1rem;
    margin-bottom: 1.5rem;
    border-radius: 4px;
    text-align: center;
    display: none;
  }
  
  .form-message:not(:empty) {
    display: block;
  }
  
  .form-message.success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }
  
  .form-message.error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }
  
  .btn {
    display: inline-block;
    padding: 0.75rem 2rem;
    font-size: 1rem;
    font-weight: 600;
    text-align: center;
    text-decoration: none;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .btn-primary {
    background-color: var(--color-primary);
    color: white;
  }
  
  .btn-primary:hover:not(:disabled) {
    background-color: var(--color-primary-dark);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  .btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
  
  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .contact-form {
      padding: 0 1rem;
    }
    
    input,
    textarea,
    select {
      font-size: 16px; /* Prevent zoom on iOS */
    }
  }
</style>
