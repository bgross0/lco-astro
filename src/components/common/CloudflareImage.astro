---
/**
 * CloudflareImage Component
 * Leverages Cloudflare Image Transform API for on-the-fly image optimization
 * https://developers.cloudflare.com/images/transform-images
 */

export interface Props {
  src: string;
  alt: string;
  class?: string;
  loading?: 'eager' | 'lazy';
  width?: number;
  height?: number;
  fit?: 'scale-down' | 'contain' | 'cover' | 'crop' | 'pad';
  quality?: number;
  format?: 'webp' | 'avif' | 'auto';
  blur?: number;
  sharpen?: number;
  sizes?: string;
  responsive?: boolean;
}

const {
  src,
  alt,
  class: className = '',
  loading = 'lazy',
  width,
  height,
  fit = 'cover',
  quality = 85,
  format = 'auto',
  blur,
  sharpen,
  sizes = '100vw',
  responsive = true
} = Astro.props;

// Build Cloudflare transform parameters
const buildTransformUrl = (params: Record<string, any>) => {
  const transformParams = new URLSearchParams();

  if (params.width) transformParams.append('width', params.width.toString());
  if (params.height) transformParams.append('height', params.height.toString());
  if (params.fit) transformParams.append('fit', params.fit);
  if (params.quality) transformParams.append('quality', params.quality.toString());
  if (params.format && params.format !== 'auto') transformParams.append('format', params.format);
  if (params.blur) transformParams.append('blur', params.blur.toString());
  if (params.sharpen) transformParams.append('sharpen', params.sharpen.toString());

  // For Cloudflare Pages, use the /cdn-cgi/image/ endpoint
  return `/cdn-cgi/image/${transformParams.toString()}${src}`;
};

// Generate responsive srcset
const generateSrcset = (format?: string) => {
  const widths = [400, 800, 1200, 1600, 2400];
  return widths.map(w => {
    const url = buildTransformUrl({
      width: w,
      height: height ? Math.round(height * (w / (width || 1600))) : undefined,
      fit,
      quality,
      format
    });
    return `${url} ${w}w`;
  }).join(', ');
};

// Default image URL with base transforms
const defaultSrc = buildTransformUrl({
  width: width || 1600,
  height,
  fit,
  quality,
  format: 'auto'
});
---

{responsive ? (
  <picture>
    {/* AVIF version for modern browsers */}
    <source
      type="image/avif"
      srcset={generateSrcset('avif')}
      sizes={sizes}
    />

    {/* WebP version */}
    <source
      type="image/webp"
      srcset={generateSrcset('webp')}
      sizes={sizes}
    />

    {/* Fallback */}
    <img
      src={defaultSrc}
      alt={alt}
      loading={loading}
      class={className}
      width={width}
      height={height}
      decoding="async"
    />
  </picture>
) : (
  <img
    src={defaultSrc}
    alt={alt}
    loading={loading}
    class={className}
    width={width}
    height={height}
    decoding="async"
  />
)}

<style>
  picture {
    display: contents;
  }

  img {
    max-width: 100%;
    height: auto;
  }
</style>