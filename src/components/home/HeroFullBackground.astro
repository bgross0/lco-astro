---
import { Image } from 'astro:assets';
import Button from '../common/Button.astro';
import Icon from '../common/Icon.astro';
import heroData from '../../content/homepage/hero.json';
import settings from '../../data/settings.json';

// Import hero images from assets (Astro will optimize these)
import heroImage1 from '../../assets/images/hero/snow-removal-wide-1120x559.jpg';
import heroImage2 from '../../assets/images/hero/img_2472.jpg';
import heroImage3 from '../../assets/images/hero/truck-mid-plow.jpg';
import heroImage4 from '../../assets/images/hero/municipal-hero-final.jpg';

const heroImages = [
  { src: heroImage1, alt: heroData.images[0]?.alt || "Professional outdoor services" },
  { src: heroImage2, alt: heroData.images[1]?.alt || "Equipment and machinery" },
  { src: heroImage3, alt: heroData.images[2]?.alt || "Professional excavation services" },
  { src: heroImage4, alt: heroData.images[3]?.alt || "Municipal contracting services" }
];

// Extract phone number from cellphone string
const phoneNumber = settings.cellphone.match(/\((\d{3})\)\s*(\d{3})-(\d{4})/);
const phoneHref = phoneNumber ? `tel:${phoneNumber[1]}${phoneNumber[2]}${phoneNumber[3]}` : 'tel:6126550648';
const phoneDisplay = phoneNumber ? `${phoneNumber[1]}-${phoneNumber[2]}-${phoneNumber[3]}` : settings.cellphone.replace('Operations ', '');
---

<section class="hero-full">
  <!-- Background Slideshow -->
  <div class="hero-slideshow-bg">
    {heroImages.map((image, index) => (
      <div class={`hero-slide ${index === 0 ? 'hero-slide--active' : ''}`}>
        <Image
          src={image.src}
          alt={image.alt}
          loading={index === 0 ? "eager" : "lazy"}
          fetchpriority={index === 0 ? 'high' : 'auto'}
          class="hero-slide-img"
          widths={[800, 1200, 1920, 2400]}
          sizes="100vw"
          quality={90}
          format="jpg"
        />
      </div>
    ))}
  </div>

  <!-- Dark overlay for text readability -->
  <div class="hero-overlay"></div>

  <!-- Main Content Container -->
  <div class="hero-container">
    <div class="hero-content">
      <!-- Logo -->
      <div class="hero-logo-wrapper">
        <picture>
          <source srcset="/lco-final.webp" type="image/webp" />
          <source srcset="/lco-final.png" type="image/png" />
          <img
            src={settings.logo}
            alt="Lake County Outdoors Logo"
            class="hero-logo"
            fetchpriority="high"
            width="240"
            height="240"
            loading="eager"
          />
        </picture>
      </div>

      <!-- Title -->
      <h1 class="hero-title">Minnesota's Outdoor Service Experts</h1>

      <!-- CTA Buttons -->
      <div class="hero-actions">
        <Button href={heroData.ctaLink} variant="primary" size="large">
          {heroData.ctaText}
        </Button>
        <Button href={phoneHref} variant="secondary" size="large">
          <Icon name="phone" size={20} />
          Call {phoneDisplay}
        </Button>
      </div>

    </div>
  </div>

  <!-- Dots navigation -->
  <div class="hero-dots">
    {heroImages.map((_, index) => (
      <button
        class={`hero-dot ${index === 0 ? 'hero-dot--active' : ''}`}
        aria-label={`Go to slide ${index + 1}`}
      ></button>
    ))}
  </div>

</section>

<!-- Bottom Services Section -->
<div class="hero-services">
  <div class="hero-services-container">
    {heroData.bottomServices && heroData.bottomServices.map((service) => (
      <div class="hero-service-item">
        <div class="hero-service-icon">
          <Icon name={service.icon} size={48} color="var(--primary)" />
        </div>
        <h4 class="hero-service-title">{service.title}</h4>
        <p class="hero-service-text">{service.description}</p>
      </div>
    ))}
  </div>
</div>

<style>
  .hero-full {
    position: relative;
    min-height: 800px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    margin-top: -80px;
    padding-top: 80px;
  }

  /* Background Slideshow */
  .hero-slideshow-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
  }

  .hero-slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 1s ease-in-out;
  }

  .hero-slide--active {
    opacity: 1;
  }

  .hero-slide :global(img) {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }

  /* Overlay */
  .hero-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      180deg,
      rgba(0, 0, 0, 0.4) 0%,
      rgba(0, 0, 0, 0.6) 50%,
      rgba(0, 0, 0, 0.7) 100%
    );
    z-index: 1;
  }

  /* Content Container */
  .hero-container {
    position: relative;
    z-index: 2;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    flex: 1;
  }

  .hero-content {
    text-align: center;
    max-width: 800px;
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding-top: 3rem;
  }

  /* Logo */
  .hero-logo-wrapper {
    margin: 0 auto 1.5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 280px;
    height: 280px;
    min-width: 280px;
    min-height: 280px;
    max-width: 280px;
    max-height: 280px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    border: 1px solid rgba(255, 255, 255, 0.25);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    flex-shrink: 0;
    aspect-ratio: 1 / 1;
  }

  .hero-logo {
    height: 240px !important;
    width: 240px !important;
    max-width: none !important;
    display: block;
  }

  /* Title */
  .hero-title {
    font-size: clamp(1.25rem, 4vw, 2.5rem);
    font-weight: 600;
    color: white;
    text-align: center;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    line-height: 1.3;
    white-space: nowrap;
    width: 100%;
    margin: 0 0 2rem 0;
  }

  /* Actions */
  .hero-actions {
    display: flex;
    gap: 1.5rem;
    justify-content: center;
    flex-wrap: wrap;
    margin-bottom: 3rem;
  }

  .hero-actions :global(.btn) {
    min-width: 200px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
  }

  .hero-actions :global(.btn-secondary) {
    background: rgba(255, 255, 255, 0.9);
    color: var(--primary);
  }

  .hero-actions :global(.btn-secondary:hover) {
    background: white;
  }

  /* Dots Navigation */
  .hero-dots {
    position: absolute;
    bottom: 1.5rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 0.75rem;
    justify-content: center;
    z-index: 3;
  }

  .hero-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    border: 2px solid white;
    background-color: rgba(255, 255, 255, 0.3);
    cursor: pointer;
    transition: all 0.3s ease;
    padding: 0;
  }

  .hero-dot--active {
    background-color: white;
    width: 30px;
    border-radius: 5px;
  }

  .hero-dot:hover {
    background-color: rgba(255, 255, 255, 0.7);
  }

  /* Bottom Services Section */
  .hero-services {
    position: relative;
    width: 100%;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    padding: 3rem 0;
  }

  .hero-services-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
  }

  .hero-service-item {
    text-align: center;
  }

  .hero-service-icon {
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 0 auto 1rem;
  }

  .hero-service-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--secondary);
  }

  .hero-service-text {
    font-size: 1rem;
    color: var(--neutral-dark);
  }

  /* Tablet styles */
  @media (min-width: 768px) {
    .hero-full {
      min-height: 750px;
    }
  }

  /* Desktop styles */
  @media (min-width: 1024px) {
    .hero-full {
      min-height: 850px;
      margin-top: -100px;
      padding-top: 100px;
    }

    .hero-container {
      padding: 0 3rem;
    }

    .hero-content {
      padding-top: 4rem;
    }

    .hero-title {
      margin-bottom: 2.5rem;
    }
  }

  /* Mobile optimizations */
  @media (max-width: 767px) {
    .hero-full {
      min-height: 700px;
    }

    .hero-container {
      padding: 0 1.5rem;
    }

    .hero-content {
      padding-top: 2rem;
    }

    .hero-title {
      font-size: 1.25rem;
      margin-bottom: 1.5rem;
    }

    .hero-actions {
      flex-direction: row;
      justify-content: center;
      gap: 0.75rem;
    }

    .hero-actions :global(.btn) {
      padding: 0.75rem 1.25rem;
      font-size: 0.9rem;
      min-width: auto;
    }

    .hero-dots {
      bottom: 1rem;
    }

    .hero-services-container {
      grid-template-columns: 1fr;
      gap: 1.5rem;
      padding: 0 1.5rem;
    }

    .hero-service-item {
      max-width: 400px;
      margin: 0 auto;
    }
  }

  /* Small mobile */
  @media (max-width: 480px) {
    .hero-title {
      font-size: 1.125rem;
    }

    .hero-actions :global(.btn) {
      padding: 0.625rem 1rem;
      font-size: 0.85rem;
    }
  }
</style>

<script>
  // Slideshow functionality
  const slides = document.querySelectorAll('.hero-slide');
  const dots = document.querySelectorAll('.hero-dot');
  let currentSlide = 0;
  let slideInterval: ReturnType<typeof setInterval>;

  function showSlide(index: number) {
    // Remove active class from all slides and dots
    slides.forEach(slide => slide.classList.remove('hero-slide--active'));
    dots.forEach(dot => dot.classList.remove('hero-dot--active'));

    // Add active class to current slide and dot
    slides[index].classList.add('hero-slide--active');
    dots[index].classList.add('hero-dot--active');

    currentSlide = index;
  }

  function nextSlide() {
    const next = (currentSlide + 1) % slides.length;
    showSlide(next);
  }

  function startSlideshow() {
    slideInterval = setInterval(nextSlide, 5000);
  }

  function stopSlideshow() {
    clearInterval(slideInterval);
  }

  // Add click handlers to dots
  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      stopSlideshow();
      showSlide(index);
      startSlideshow();
    });
  });

  // Start automatic slideshow
  startSlideshow();

  // Touch swipe support for mobile
  let touchStartX = 0;
  let touchEndX = 0;

  const heroSection = document.querySelector('.hero-full');

  if (heroSection) {
    heroSection.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    }, { passive: true });

    heroSection.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    }, { passive: true });
  }

  function handleSwipe() {
    const swipeThreshold = 50;
    const diff = touchStartX - touchEndX;

    if (Math.abs(diff) > swipeThreshold) {
      stopSlideshow();
      if (diff > 0) {
        // Swipe left - next slide
        const next = (currentSlide + 1) % slides.length;
        showSlide(next);
      } else {
        // Swipe right - previous slide
        const prev = (currentSlide - 1 + slides.length) % slides.length;
        showSlide(prev);
      }
      startSlideshow();
    }
  }
</script>
