---
import { Image } from 'astro:assets';
import servicesShowcase from '../../content/homepage/services-showcase.json';

// Import service images from assets
import snowRemovalImg from '../../assets/images/services/img-7575-1920w.webp';
import landscapingImg from '../../assets/images/services/landscaping-square-1-600x600.jpg';
import municipalImg from '../../assets/images/services/img-2322-1920w.webp';
import iceManagementImg from '../../assets/images/services/img-8046-1920w.webp';

// Map service IDs to imported images
const serviceImageMap = {
  'snow-removal': snowRemovalImg,
  'landscaping': landscapingImg,
  'municipal': municipalImg,
  'ice-management': iceManagementImg
};

// Sort services by order and attach images
const services = servicesShowcase.services
  .sort((a, b) => a.order - b.order)
  .map(service => ({
    ...service,
    imageSrc: serviceImageMap[service.id]
  }));

const { title, subtitle, autoScrollInterval } = servicesShowcase;
---

<section class="services-showcase" data-interval={autoScrollInterval}>
  <div class="container">
    <div class="showcase-header">
      <h2 class="showcase-title fade-in-top">{title}</h2>
      <p class="showcase-subtitle fade-in-top delay-1">{subtitle}</p>
    </div>

    <div class="options-container">
      <div class="options">
        {services.map((service, index) => (
          <a
            href={service.href}
            class={`option ${index === 0 ? 'active' : ''}`}
            data-service-id={service.id}
          >
            {/* Astro-optimized background image */}
            <div class="option-bg">
              <Image
                src={service.imageSrc}
                alt={service.title}
                class="option-bg-img"
                widths={[400, 600, 800, 1200]}
                sizes="(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 33vw"
                quality={90}
                format="jpg"
                loading={index === 0 ? "eager" : "lazy"}
              />
            </div>
            <div class="shadow"></div>
            <div class="label">
              <div class="icon">
                <i class={service.icon}></i>
              </div>
              <div class="info">
                <div class="main">{service.title}</div>
                <div class="sub">{service.subtitle}</div>
              </div>
            </div>
          </a>
        ))}
      </div>

      <!-- Progress indicator -->
      <div class="progress-bar">
        <div class="progress-fill"></div>
      </div>
    </div>
  </div>
</section>

<style>
  .services-showcase {
    padding: var(--space-16) 0;
    background: var(--neutral-light);
    overflow: hidden;
    position: relative;
  }

  .showcase-header {
    text-align: center;
    margin-bottom: var(--space-12);
  }

  .showcase-title {
    font-size: clamp(2rem, 5vw, 2.5rem);
    font-weight: 700;
    color: var(--secondary);
    margin-bottom: var(--space-2);
  }

  .showcase-subtitle {
    font-size: 1.25rem;
    color: var(--neutral-dark);
  }

  .options-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 var(--space-4);
  }

  .options {
    display: flex;
    flex-direction: column;
    gap: var(--space-2);
    width: 100%;
  }

  .option {
    position: relative;
    display: block;
    min-height: 60px;
    max-height: 60px;
    overflow: hidden;
    border-radius: 10px;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
    text-decoration: none;
  }

  /* Background image container */
  .option-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
  }

  .option-bg :global(img.option-bg-img) {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: transform 0.6s ease;
  }

  .option:hover .option-bg :global(img.option-bg-img) {
    transform: scale(1.1);
  }

  .shadow {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    top: 0;
    background: linear-gradient(to bottom,
      rgba(0, 0, 0, 0.3) 0%,
      rgba(0, 0, 0, 0.6) 100%
    );
    transition: opacity 0.3s ease;
    z-index: 1;
  }

  .option.active .shadow {
    opacity: 0.8;
  }

  .label {
    position: relative;
    z-index: 2;
    display: flex;
    align-items: center;
    padding: var(--space-4);
    gap: var(--space-3);
    height: 100%;
  }

  .icon {
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    color: white;
    min-width: 40px;
  }

  .info {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .main {
    font-size: 1.125rem;
    font-weight: 600;
    color: white;
    transition: all 0.3s ease;
  }

  .sub {
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.9);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .option.active {
    max-height: 600px;
  }

  .option.active .main {
    font-size: 1.5rem;
  }

  .option.active .sub {
    opacity: 1;
  }

  .progress-bar {
    margin-top: var(--space-4);
    height: 4px;
    background: rgba(0, 0, 0, 0.1);
    border-radius: 2px;
    overflow: hidden;
  }

  .progress-fill {
    height: 100%;
    width: 0%;
    background: var(--primary);
    transition: width 5s linear;
  }

  /* Tablet and up */
  @media (min-width: 768px) {
    .options {
      flex-direction: row;
      min-height: 600px;
    }

    .option {
      min-width: 80px;
      max-width: 80px;
      min-height: 600px;
      max-height: 600px;
    }

    .label {
      writing-mode: vertical-rl;
      text-align: center;
      justify-content: center;
      padding: var(--space-6) var(--space-3);
    }

    .icon {
      writing-mode: horizontal-tb;
      min-height: 40px;
      font-size: 2rem;
    }

    .info {
      writing-mode: vertical-rl;
    }

    .main {
      font-size: 1.25rem;
    }

    .option.active {
      max-width: 800px;
    }

    .option.active .label {
      writing-mode: horizontal-tb;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
    }

    .option.active .info {
      writing-mode: horizontal-tb;
      align-items: center;
    }

    .option.active .main {
      font-size: 2rem;
    }

    .option.active .sub {
      font-size: 1.125rem;
    }
  }

  /* Animation classes */
  .fade-in-top {
    opacity: 0;
    animation: fadeInTop 0.6s ease-out forwards;
  }

  .delay-1 {
    animation-delay: 0.2s;
  }

  @keyframes fadeInTop {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  const options = document.querySelectorAll('.option');
  const progressFill = document.querySelector('.progress-fill') as HTMLElement;
  const autoScrollInterval = parseInt(
    document.querySelector('.services-showcase')?.getAttribute('data-interval') || '5000'
  );

  let currentIndex = 0;
  let intervalId: ReturnType<typeof setInterval>;
  let progressIntervalId: ReturnType<typeof setInterval>;

  function setActiveOption(index: number) {
    options.forEach(opt => opt.classList.remove('active'));
    options[index].classList.add('active');
    currentIndex = index;

    // Reset and animate progress bar
    if (progressFill) {
      progressFill.style.transition = 'none';
      progressFill.style.width = '0%';

      setTimeout(() => {
        progressFill.style.transition = `width ${autoScrollInterval}ms linear`;
        progressFill.style.width = '100%';
      }, 50);
    }
  }

  function autoScroll() {
    const nextIndex = (currentIndex + 1) % options.length;
    setActiveOption(nextIndex);
  }

  function startAutoScroll() {
    intervalId = setInterval(autoScroll, autoScrollInterval);
  }

  function stopAutoScroll() {
    clearInterval(intervalId);
    if (progressFill) {
      progressFill.style.transition = 'none';
      progressFill.style.width = '0%';
    }
  }

  // Click handlers
  options.forEach((option, index) => {
    option.addEventListener('click', (e) => {
      // Only prevent default if not navigating
      if (currentIndex === index) {
        e.preventDefault();
      }
    });

    option.addEventListener('mouseenter', () => {
      stopAutoScroll();
      setActiveOption(index);
    });

    option.addEventListener('mouseleave', () => {
      startAutoScroll();
    });
  });

  // Start auto-scroll
  startAutoScroll();

  // Initial progress bar animation
  if (progressFill) {
    setTimeout(() => {
      progressFill.style.transition = `width ${autoScrollInterval}ms linear`;
      progressFill.style.width = '100%';
    }, 100);
  }
</script>
