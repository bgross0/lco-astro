---
import servicesShowcase from '../../content/homepage/services-showcase.json';

// Sort services by order
const services = servicesShowcase.services.sort((a, b) => a.order - b.order);
const { title, subtitle, autoScrollInterval } = servicesShowcase;
---

<section class="services-showcase" data-interval={autoScrollInterval}>
  <div class="container">
    <div class="showcase-header">
      <h2 class="showcase-title fade-in-top">{title}</h2>
      <p class="showcase-subtitle fade-in-top delay-1">{subtitle}</p>
    </div>
    
    <div class="options-container">
      <div class="options">
        {services.map((service, index) => (
          <a 
            href={service.href}
            class={`option ${index === 0 ? 'active' : ''}`}
            data-service-id={service.id}
            data-bg-image={service.image}
            style={index === 0 ? `background-image: url('${service.image}');` : ''}
          >
            <div class="shadow"></div>
            <div class="label">
              <div class="icon">
                <i class={service.icon}></i>
              </div>
              <div class="info">
                <div class="main">{service.title}</div>
                <div class="sub">{service.subtitle}</div>
              </div>
            </div>
          </a>
        ))}
      </div>
      
      <!-- Progress indicator -->
      <div class="progress-bar">
        <div class="progress-fill"></div>
      </div>
    </div>
  </div>
</section>

<style>
  .services-showcase {
    padding: var(--space-16) 0;
    background: var(--neutral-light);
    overflow: hidden;
    position: relative;
  }
  
  .showcase-header {
    text-align: center;
    margin-bottom: var(--space-12);
  }
  
  .showcase-title {
    font-size: clamp(2rem, 5vw, 3rem);
    font-weight: 800;
    color: var(--primary);
    margin-bottom: var(--space-4);
  }
  
  .showcase-subtitle {
    font-size: var(--text-lg);
    color: var(--primary);
    max-width: 600px;
    margin: 0 auto;
  }
  
  .options-container {
    position: relative;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .options {
    display: flex;
    width: 100%;
    height: 500px;
    align-items: stretch;
    overflow: hidden;
    position: relative;
    gap: 2px;
  }
  
  .option {
    border-radius: var(--radius-lg);
    border: 2px solid rgba(0, 0, 0, 0.1);
    margin: 0;
    min-width: 80px;
    flex: 1 1 0%;
    transition: all 0.8s cubic-bezier(.23, 1, .32, 1);
    cursor: pointer;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    position: relative;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    opacity: 0;
    transform: translateX(-60px);
    text-decoration: none;
    -webkit-tap-highlight-color: transparent;
    touch-action: manipulation;
  }
  
  .option.animated {
    animation: slideFadeIn 0.7s cubic-bezier(.23, 1, .32, 1) forwards;
  }
  
  @keyframes slideFadeIn {
    0% {
      opacity: 0;
      transform: translateX(-60px);
    }
    100% {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  .option .shadow,
  .option .label .main,
  .option .label .sub {
    transition: all 0.8s cubic-bezier(.23, 1, .32, 1);
    will-change: transform, opacity;
  }
  
  .option .label .main,
  .option .label .sub {
    opacity: 0;
    transform: translateX(25px);
  }
  
  .option.active {
    flex-grow: 8;
    z-index: 10;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    border-color: var(--primary);
  }
  
  .option.active .shadow {
    bottom: 0 !important;
    box-shadow: inset 0 -120px 120px -120px #000, inset 0 -120px 120px -80px #000;
  }
  
  .option.active .label .main,
  .option.active .label .sub {
    opacity: 1;
    transform: translateX(0);
  }
  
  .option:hover:not(.active) {
    flex-grow: 1.5;
  }
  
  .option .shadow {
    position: absolute;
    bottom: -40px;
    left: 0;
    right: 0;
    height: 120px;
    pointer-events: none;
    box-shadow: inset 0 -120px 0px -120px #000, inset 0 -120px 0px -80px #000;
  }
  
  .option .label {
    position: absolute;
    left: 0;
    right: 0;
    bottom: 20px;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    height: 48px;
    z-index: 2;
    padding: 0 var(--space-4);
    gap: var(--space-3);
    width: 100%;
    pointer-events: none;
  }
  
  .option .icon {
    min-width: 48px;
    max-width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 9999px;
    background: rgba(32, 32, 32, 0.9);
    backdrop-filter: blur(10px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    font-size: 1.5rem;
    color: var(--white);
    border: 2px solid var(--primary);
    flex-shrink: 0;
  }
  
  .option.active .icon {
    background: var(--primary);
    border-color: var(--white);
  }
  
  .option .info {
    flex: 1 1 0%;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
  
  .option .label .main {
    font-weight: 700;
    font-size: var(--text-lg);
    color: var(--white);
    margin-bottom: 2px;
  }
  
  .option .label .sub {
    font-size: var(--text-sm);
    color: rgba(255, 255, 255, 0.8);
  }
  
  /* Progress bar */
  .progress-bar {
    position: relative;
    height: 4px;
    background: rgba(0, 0, 0, 0.1);
    border-radius: 2px;
    margin-top: var(--space-8);
    overflow: hidden;
  }
  
  .progress-fill {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 0;
    background: var(--primary);
    border-radius: 2px;
  }
  
  @keyframes progressAnimation {
    0% { width: 0; }
    100% { width: 100%; }
  }
  
  /* Animations */
  .fade-in-top {
    opacity: 0;
    transform: translateY(-20px);
    animation: fadeInFromTop 0.8s ease-in-out forwards;
  }
  
  .fade-in-top.delay-1 {
    animation-delay: 0.3s;
  }
  
  @keyframes fadeInFromTop {
    0% {
      opacity: 0;
      transform: translateY(-20px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Responsive - Tablet */
  @media (max-width: 768px) {
    .services-showcase {
      padding: var(--space-12) 0;
    }
    
    .showcase-title {
      font-size: clamp(1.75rem, 4vw, 2.5rem);
    }
    
    .showcase-subtitle {
      font-size: var(--text-base);
    }
    
    .options {
      height: 400px;
      gap: 1px;
    }
    
    .option {
      min-width: 60px;
    }
    
    .option.active {
      flex-grow: 6;
    }
    
    .option .label {
      padding: 0 var(--space-3);
      bottom: 15px;
    }
    
    .option .icon {
      min-width: 40px;
      max-width: 40px;
      height: 40px;
      font-size: 1.2rem;
    }
    
    .option .label .main {
      font-size: var(--text-base);
    }
    
    .option .label .sub {
      font-size: var(--text-xs);
      display: none; /* Hide subtitle on tablets */
    }
    
    .option.active .label .sub {
      display: block; /* Show subtitle only for active card */
    }
    
    /* Show all 4 services on tablet - they'll just be thinner */
    
    .progress-bar {
      margin-top: var(--space-6);
    }
  }
  
  /* Responsive - Mobile */
  @media (max-width: 640px) {
    .services-showcase {
      padding: var(--space-8) 0;
    }
    
    .showcase-header {
      margin-bottom: var(--space-8);
    }
    
    .showcase-title {
      font-size: clamp(1.5rem, 5vw, 2rem);
      margin-bottom: var(--space-2);
    }
    
    .showcase-subtitle {
      font-size: var(--text-sm);
      padding: 0 var(--space-2);
    }
    
    .options-container {
      padding: 0;
    }
    
    .options {
      height: 300px;
      border-radius: var(--radius-lg);
      margin: 0 auto;
    }
    
    .option {
      min-width: 50px;
    }
    
    .option:first-child {
      border-radius: var(--radius-lg) 0 0 var(--radius-lg);
    }
    
    .option:last-child {
      border-radius: 0 var(--radius-lg) var(--radius-lg) 0;
    }
    
    .option.active {
      flex-grow: 10;
    }
    
    .option .label {
      bottom: 10px;
      padding: 0 var(--space-2);
      gap: var(--space-2);
    }
    
    .option .icon {
      min-width: 36px;
      max-width: 36px;
      height: 36px;
      font-size: 1.1rem;
      border-width: 1px;
    }
    
    .option .label .main {
      font-size: var(--text-sm);
      font-weight: 600;
    }
    
    .option .label .sub {
      display: none;
    }
    
    /* Show all services on mobile - adjust min-width instead */
    .option {
      min-width: 40px; /* Even smaller to fit all 4 */
    }
    
    .progress-bar {
      margin: var(--space-4) var(--space-4) 0;
      height: 3px;
    }
  }
  
  /* Responsive - Very small mobile */
  @media (max-width: 480px) {
    .options {
      height: 250px;
    }
    
    .option .icon {
      min-width: 32px;
      max-width: 32px;
      height: 32px;
      font-size: 1rem;
    }
    
    .option .label .main {
      font-size: var(--text-xs);
    }
  }
</style>

<script>
  // Get the interval from data attribute
  const showcaseElement = document.querySelector('.services-showcase');
  const intervalTime = parseInt(showcaseElement?.dataset.interval || '5000');
  
  // Card interaction
  const options = document.querySelectorAll('.option');
  let currentIndex = 0;
  let autoScrollTimer;
  
  // Lazy load background images
  function loadBackgroundImage(element: Element) {
    const bgImage = element.getAttribute('data-bg-image');
    if (bgImage && !element.style.backgroundImage) {
      (element as HTMLElement).style.backgroundImage = `url('${bgImage}')`;
    }
  }
  
  // Load images for visible and adjacent options
  function loadVisibleImages() {
    options.forEach((option, index) => {
      // Load current, previous, and next images
      if (Math.abs(index - currentIndex) <= 1) {
        loadBackgroundImage(option);
      }
    });
  }
  
  function setActiveOption(index: number) {
    const currentActive = document.querySelector('.option.active');
    if (currentActive) {
      currentActive.classList.remove('active');
    }
    
    if (options[index]) {
      options[index].classList.add('active');
      currentIndex = index;
      loadVisibleImages(); // Load images when changing active option
      
      // Reset progress bar with proper animation
      const progressFill = document.querySelector('.progress-fill') as HTMLElement;
      if (progressFill) {
        // Remove animation class
        progressFill.style.animation = 'none';
        progressFill.style.width = '0%';
        
        // Force reflow to restart animation
        void progressFill.offsetHeight;
        
        // Add animation back
        progressFill.style.animation = `progressAnimation ${intervalTime}ms linear forwards`;
      }
    }
  }
  
  // Auto-scroll function
  function startAutoScroll() {
    // Clear any existing interval first
    stopAutoScroll();
    
    autoScrollTimer = setInterval(() => {
      const nextIndex = (currentIndex + 1) % options.length;
      requestAnimationFrame(() => {
        setActiveOption(nextIndex);
      });
    }, intervalTime);
  }
  
  function stopAutoScroll() {
    if (autoScrollTimer) {
      clearInterval(autoScrollTimer);
    }
  }
  
  // Manual click handling
  options.forEach((option, index) => {
    option.addEventListener('click', (e) => {
      e.preventDefault();
      
      // If already active, navigate to the service page
      if (option.classList.contains('active')) {
        window.location.href = option.getAttribute('href') || '#';
        return;
      }
      
      // Otherwise, make it active
      stopAutoScroll();
      setActiveOption(index);
      
      // Restart auto-scroll after user interaction
      setTimeout(() => {
        startAutoScroll();
      }, 10000); // Wait 10 seconds before resuming auto-scroll
    });
  });
  
  // Entrance animation
  window.addEventListener('DOMContentLoaded', () => {
    // Load initial images
    loadVisibleImages();
    
    options.forEach((el, i) => {
      setTimeout(() => {
        el.classList.add('animated');
      }, 150 * i);
    });
    
    // Start auto-scroll after animations complete
    setTimeout(() => {
      // Set initial progress bar animation
      const progressFill = document.querySelector('.progress-fill');
      if (progressFill) {
        progressFill.style.animation = `progressAnimation ${intervalTime}ms linear forwards`;
      }
      
      startAutoScroll();
    }, 1000);
  });
  
  // Pause auto-scroll when hovering
  const optionsContainer = document.querySelector('.options');
  optionsContainer?.addEventListener('mouseenter', stopAutoScroll);
  optionsContainer?.addEventListener('mouseleave', () => {
    startAutoScroll();
  });
  
  // Touch support for mobile
  let touchStartX = 0;
  let touchEndX = 0;
  
  function handleSwipe() {
    const swipeThreshold = 50;
    const diff = touchStartX - touchEndX;
    
    if (Math.abs(diff) > swipeThreshold) {
      stopAutoScroll();
      
      if (diff > 0) {
        // Swipe left - next
        const nextIndex = (currentIndex + 1) % options.length;
        setActiveOption(nextIndex);
      } else {
        // Swipe right - previous
        const prevIndex = (currentIndex - 1 + options.length) % options.length;
        setActiveOption(prevIndex);
      }
      
      // Restart auto-scroll after swipe
      setTimeout(() => {
        startAutoScroll();
      }, 10000);
    }
  }
  
  optionsContainer?.addEventListener('touchstart', (e) => {
    touchStartX = e.touches[0].clientX;
  }, { passive: true });
  
  optionsContainer?.addEventListener('touchend', (e) => {
    touchEndX = e.changedTouches[0].clientX;
    handleSwipe();
  }, { passive: true });
  
  // Clean up on page unload
  window.addEventListener('beforeunload', stopAutoScroll);
</script>